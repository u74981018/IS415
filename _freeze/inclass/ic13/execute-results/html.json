{
  "hash": "013e6db442319f0d84539b8507f310d1",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: \"Lucas Vial\"\ndate: \"Nov 11 2024\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n---\n\n\n# Week 13 Class\n\n## Predictive Modelling\n\n### Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(df, spdep, GWmodel, SpatialML, tmap, rsample, yardstick, tidyverse, knitr, kableExtra, spatitalRF, ggstatsplot, ranger)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata = readRDS(\"data/mdata.RDS\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nHDB_sample <- mdata %>%\n  sample_n(1500)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- HDB_sample %>%\n  mutate(overlap = lengths(st_equals(., . )) > 1)\nsummary(overlapping_points$overlap)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Mode   FALSE    TRUE \nlogical    1047     453 \n```\n\n\n:::\n:::\n\n\nSpatial Jitter\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHDB_sample <- HDB_sample %>%\n  st_jitter(amount = 5) #no. meters of jitter\n```\n:::\n\n\n## sampling and splitting for models \n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_split <- initial_split(HDB_sample,\n                              prop = 6.67/10,)\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n\n# Its a good Habit to start saving your data as rds\n# write_rds(train_data, \"data/rds/train_data.rds\")\n```\n:::\n\n\nMulticolinerarity check\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata_nogeo <- mdata %>%\n  st_drop_geometry()\nggcorrmat(mdata_nogeo[, 2:17])\n```\n\n::: {.cell-output-display}\n![](ic13_files/figure-html/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_train_ad <- bw.gwr(resale_price ~ floor_area_sqm + storey_order +\n                          remaining_lease_mths + PROX_CBD + \n                          PROX_ELDERLYCARE + PROX_HAWKER + \n                          PROX_GOOD_PRISCH + PROX_MALL + PROX_CHAS +\n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE +\n                          WITHIN_1KM_PRISCH,\n                          data=train_data,\n                          approach=\"CV\",\n                          kernel=\"gaussian\",\n                          adaptive=TRUE,\n                          longlat=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 625 CV score: 3.66363e+12 \nAdaptive bandwidth: 394 CV score: 3.412143e+12 \nAdaptive bandwidth: 250 CV score: 3.052116e+12 \nAdaptive bandwidth: 162 CV score: 2.711192e+12 \nAdaptive bandwidth: 107 CV score: 2.356134e+12 \nAdaptive bandwidth: 73 CV score: 2.077005e+12 \nAdaptive bandwidth: 52 CV score: 1.883242e+12 \nAdaptive bandwidth: 39 CV score: 1.758101e+12 \nAdaptive bandwidth: 31 CV score: 1.641266e+12 \nAdaptive bandwidth: 26 CV score: 1.582404e+12 \nAdaptive bandwidth: 23 CV score: 1.529336e+12 \nAdaptive bandwidth: 21 CV score: 1.518322e+12 \nAdaptive bandwidth: 19 CV score: 1.498596e+12 \nAdaptive bandwidth: 19 CV score: 1.498596e+12 \n```\n\n\n:::\n:::\n\n\nmodel calibration\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_ad <- gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order +\n                          remaining_lease_mths + PROX_CBD + \n                          PROX_ELDERLYCARE + PROX_HAWKER + \n                          PROX_GOOD_PRISCH + PROX_MALL + PROX_CHAS +\n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE +\n                          WITHIN_1KM_PRISCH,\n                          data=train_data,\n                          bw=20,\n                          kernel=\"gaussian\",\n                          adaptive=TRUE,\n                          longlat=FALSE)\n```\n:::\n\n\n## Model output \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_ad\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-11 11:16:24.540765 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n    remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_GOOD_PRISCH + PROX_MALL + PROX_CHAS + PROX_SUPERMARKET + \n    WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_1KM_PRISCH, \n    data = train_data, bw = 20, kernel = \"gaussian\", adaptive = TRUE, \n    longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_order remaining_lease_mths PROX_CBD PROX_ELDERLYCARE PROX_HAWKER PROX_GOOD_PRISCH PROX_MALL PROX_CHAS PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE WITHIN_1KM_PRISCH\n   Number of data points: 1000\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-167111  -41591   -4672   36140  228878 \n\n   Coefficients:\n                             Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)               56497.31   34575.16   1.634 0.102569    \n   floor_area_sqm             2818.99     296.03   9.523  < 2e-16 ***\n   storey_order              14500.98    1099.16  13.193  < 2e-16 ***\n   remaining_lease_mths        365.26      15.08  24.226  < 2e-16 ***\n   PROX_CBD                 -18103.92     732.90 -24.702  < 2e-16 ***\n   PROX_ELDERLYCARE          -9363.65    3257.53  -2.874 0.004134 ** \n   PROX_HAWKER              -20089.53    4199.51  -4.784 1.98e-06 ***\n   PROX_GOOD_PRISCH           2179.44    1054.46   2.067 0.039007 *  \n   PROX_MALL                -24227.31    6649.21  -3.644 0.000283 ***\n   PROX_CHAS                -51436.75   20627.04  -2.494 0.012806 *  \n   PROX_SUPERMARKET           6236.26   14172.61   0.440 0.660018    \n   WITHIN_350M_KINDERGARTEN  10645.99    2107.99   5.050 5.25e-07 ***\n   WITHIN_350M_CHILDCARE     -1462.40    1222.53  -1.196 0.231902    \n   WITHIN_1KM_PRISCH         -7714.11    1573.90  -4.901 1.11e-06 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 62660 on 986 degrees of freedom\n   Multiple R-squared: 0.7257\n   Adjusted R-squared: 0.722 \n   F-statistic: 200.6 on 13 and 986 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 3.870726e+12\n   Sigma(hat): 62277.46\n   AIC:  24944.58\n   AICc:  24945.07\n   BIC:  24121.82\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 20 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                   Min.     1st Qu.      Median     3rd Qu.\n   Intercept                -9033947.33  -895892.73   -94322.75   184700.25\n   floor_area_sqm              -3413.51     1140.08     1938.88     3412.56\n   storey_order                  657.43     7744.81    11261.89    14104.58\n   remaining_lease_mths         -341.47      311.09      420.22      539.64\n   PROX_CBD                  -675900.44   -35689.44   -12582.35    65815.57\n   PROX_ELDERLYCARE          -394126.40   -20470.75     1860.83    23191.74\n   PROX_HAWKER               -213597.41   -45774.50   -20815.23     1537.58\n   PROX_GOOD_PRISCH          -853782.43   -80161.87   -18355.85    18738.25\n   PROX_MALL                 -163950.54   -54890.13   -11510.44    27950.74\n   PROX_CHAS                 -169243.07   -63532.66   -27577.03    21981.72\n   PROX_SUPERMARKET          -383172.73   -45644.70    -3572.82    25733.89\n   WITHIN_350M_KINDERGARTEN   -42287.25    -7490.15     1085.78     6369.54\n   WITHIN_350M_CHILDCARE      -19973.71    -2558.21     1376.03     3869.32\n   WITHIN_1KM_PRISCH          -59787.86    -3624.79     4135.55     9818.85\n                                  Max.\n   Intercept                7117465.78\n   floor_area_sqm              8748.48\n   storey_order               23612.26\n   remaining_lease_mths         772.56\n   PROX_CBD                  922851.83\n   PROX_ELDERLYCARE          132157.08\n   PROX_HAWKER               169506.17\n   PROX_GOOD_PRISCH          547052.51\n   PROX_MALL                 198009.83\n   PROX_CHAS                 501181.10\n   PROX_SUPERMARKET          198325.79\n   WITHIN_350M_KINDERGARTEN   34091.48\n   WITHIN_350M_CHILDCARE      14751.40\n   WITHIN_1KM_PRISCH          22829.27\n   ************************Diagnostic information*************************\n   Number of data points: 1000 \n   Effective number of parameters (2trace(S) - trace(S'S)): 385.5473 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 614.4527 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 24065.11 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 23458.75 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 24312.53 \n   Residual sum of squares: 659562152643 \n   R-square value:  0.953254 \n   Adjusted R-square value:  0.9238747 \n\n   ***********************************************************************\n   Program stops at: 2024-11-11 11:16:25.252606 \n```\n\n\n:::\n:::\n\n\nThis is gonna take forever, but this is how you test your model. wait i think he was talking about something else....\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred <- gwr.predict(formula = resale_price ~ floor_area_sqm + storey_order +\n                          remaining_lease_mths + PROX_CBD + \n                          PROX_ELDERLYCARE + PROX_HAWKER + \n                          PROX_GOOD_PRISCH + PROX_MALL + PROX_CHAS +\n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE +\n                          WITHIN_1KM_PRISCH,\n                          data=train_data,\n                        predictdata = test_data,\n                          bw=20,\n                          kernel=\"gaussian\",\n                          adaptive=TRUE,\n                          longlat=FALSE)\n```\n:::\n\n\nsaving predicted values\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred_df <- as.data.frame(\n  gwr_pred$SDF$prediction\n) %>%\n  rename(gwr_pred = \"gwr_pred$SDF$prediction\")\n```\n:::\n\n\n## Predictive Modelling with RF method\n\nshowed us the ranger package - it doesnt work for spatial data\n\nfor this; if using ? you may have to calculate centroids\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(HDB_sample)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n\ntrain_data_nogeom <- train_data %>%\n  st_drop_geometry()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrf <- ranger(resale_price ~ floor_area_sqm + storey_order +\n                          remaining_lease_mths + PROX_CBD + \n                          PROX_ELDERLYCARE + PROX_HAWKER + \n                          PROX_GOOD_PRISCH + PROX_MALL + PROX_CHAS +\n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE +\n                          WITHIN_1KM_PRISCH,\n                        data = train_data_nogeom)\n```\n:::\n\n\nmodel output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_GOOD_PRISCH +      PROX_MALL + PROX_CHAS + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_1KM_PRISCH, data = train_data_nogeom) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1000 \nNumber of independent variables:  13 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       2342781298 \nR squared (OOB):                  0.8341229 \n```\n\n\n:::\n:::\n\n\nPreparing test data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_nogeom <- cbind(\n  test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n\nPredicting and saving\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred <- predict(rf, data = test_data_nogeom)\n\nrf_pred_df <- as.data.frame(rf_pred$predictions) %>%\n  rename(rf_pred = \"rf_pred$predictions\")\n```\n:::\n\n\n## Predictive Modelling with Spatial ML \n\ndetermining bandwidth (FLEW by this inclass so this isn't it at all)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_train_ad <- bw.gwr(resale_price ~ floor_area_sqm + storey_order +\n                          remaining_lease_mths + PROX_CBD + \n                          PROX_ELDERLYCARE + PROX_HAWKER + \n                          PROX_GOOD_PRISCH + PROX_MALL + PROX_CHAS +\n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE +\n                          WITHIN_1KM_PRISCH,\n                          data=train_data,\n                          approach=\"CV\",\n                          kernel=\"gaussian\",\n                          adaptive=TRUE,\n                          longlat=FALSE)\n```\n:::\n\n\ncalibrating the model\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_ad <- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                          remaining_lease_mths + PROX_CBD + \n                          PROX_ELDERLYCARE + PROX_HAWKER + \n                          PROX_GOOD_PRISCH + PROX_MALL + PROX_CHAS +\n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE +\n                          WITHIN_1KM_PRISCH,\n                          dframe=train_data_nogeom,\n                          bw=20,\n                          kernel=\"adaptive\",\n                          coords=coords_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_GOOD_PRISCH +      PROX_MALL + PROX_CHAS + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_1KM_PRISCH, data = train_data_nogeom,      num.trees = 500, mtry = 4, importance = \"impurity\", num.threads = NULL) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1000 \nNumber of independent variables:  13 \nMtry:                             4 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       2145222071 \nR squared (OOB):                  0.8481108 \n          floor_area_sqm             storey_order     remaining_lease_mths \n            7.121287e+11             1.663446e+12             2.601549e+12 \n                PROX_CBD         PROX_ELDERLYCARE              PROX_HAWKER \n            4.138975e+12             4.609557e+11             5.195355e+11 \n        PROX_GOOD_PRISCH                PROX_MALL                PROX_CHAS \n            1.465084e+12             4.800807e+11             2.847678e+11 \n        PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN    WITHIN_350M_CHILDCARE \n            3.618960e+11             2.014212e+11             2.726077e+11 \n       WITHIN_1KM_PRISCH \n            6.069468e+11 \n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-386112.0  -23213.3    -995.7    -365.3   20242.3  372312.5 \n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-52932.78  -2939.48   -106.79     39.45   2757.79  58177.47 \n                               Min          Max        Mean         StD\nfloor_area_sqm                   0  90326315616  7484703498 13734951181\nstorey_order              33377481 171437137430  6840154928 18313846260\nremaining_lease_mths     236986812 152690628194 17377613060 29741599965\nPROX_CBD                 139771571  99104858702  7792987375 12254445329\nPROX_ELDERLYCARE         132277977  74143725631  6084432902  8963958725\nPROX_HAWKER              169288128  74298078422  6097355230  9672974376\nPROX_GOOD_PRISCH         130736014  95902613984  7124297584 11783582473\nPROX_MALL                 81841673 113693386652  7365416045 12658831753\nPROX_CHAS                 97560391  62503579940  5107419560  7683227062\nPROX_SUPERMARKET         169447304  77107373697  5665782257 10163749215\nWITHIN_350M_KINDERGARTEN         0  67042064804  2102647227  5024830629\nWITHIN_350M_CHILDCARE     29792797  94650273883  4173303680  8449467739\nWITHIN_1KM_PRISCH                0  62003430312  1873964880  3649680456\n```\n\n\n:::\n:::\n\n\nTest Data Prep (Already Done)\n\nPredictions and Saving\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_pred <- predict.grf(grf_ad, \n                        test_data_nogeom,\n                        x.var.name=\"X\",\n                        y.var.name=\"Y\",\n                        local.w=1,\n                        global.w=0)\n\ngrf_pred_df <- as.data.frame(grf_pred)\n```\n:::\n\n\nModel Comparison\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_pred <- test_data %>%\n  dplyr::select(resale_price) %>%\n  cbind(gwr_pred_df) %>%\n  cbind(rf_pred_df) %>%\n  cbind(grf_pred_df)\n```\n:::\n\n\nModel Comparison Plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_longer <- test_data_pred %>%\n  st_drop_geometry() %>%\n  pivot_longer(col = ends_with(\"pred\"),\n               names_to = \"model\",\n               values_to = \"predicted\")\n```\n:::\n\n\nRenaming all the things to be nice\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_results <- test_longer %>%\n  group_by(model) %>%\n  rmse(truth = resale_price,\n       estimate = predicted) %>%\n  rename(rmse = .estimate) %>%\n  dplyr::select(model, rmse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rmse_results,\n       aes(x = reorder(model, rmse),\n           y = rmse)) +\n  geom_bar(stat=\"identity\",\n           fill = \"blue\",\n           color=\"black\",\n           width=0.7)\n```\n\n::: {.cell-output-display}\n![](ic13_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_longer <- test_longer %>%\n  left_join(rmse_results,\n            by = \"model\")\n\nggplot(data = test_longer,\n       aes(x = predicted,\n           y= resale_price)) +\n  facet_wrap(~model) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ic13_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# add RMSE to plot \n```\n:::\n\n\n## Variable Importance \n\nwhich variables are more important to predictions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar_imp <- data.frame(\n  Variable = names(grf_ad$Global.Model$variable.importance),\n  Importance = grf_ad$Global.Model$variable.importance\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(var_imp,\n       aes(x=reorder(Variable, Importance),\n           y=Importance)) +\n  geom_bar(stat=\"identity\",\n           fill=\"skyblue\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](ic13_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "ic13_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}