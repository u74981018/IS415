{
  "hash": "5e3a0f08abc8c61fcde703085af75f6f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class 1\"\nauthor: \"Lucas Vial\"\ndate: \"Aug 24 2024\"\ndate-modified: \"Date\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n## **2.1 Overview**\n\nIn general, thematic mapping involves the use of map symbols to\nvisualize selected properties of geographic features that are not\nnaturally visible, such as population, temperature, crime rate, and\nproperty prices, just to mention a few of them.\n\nGeovisualisation, on the other hand, works by providing graphical\nideation to render a place, a phenomenon or a process visible, enabling\nhuman’s most powerful information-processing abilities – those of\nspatial cognition associated with our eye–brain vision system – to be\ndirectly brought to bear.\n\nIn this chapter, you will learn how to plot functional and truthful\nchoropleth maps by using an R package called \\*\\*tmap\\*\\* package.\n\n### **2.1.1 Survival Tip**\n\nIt is advisable for you to read the functional description of each\nfunction before using them.\n\n## **2.2 Getting Started**\n\nIn this hands-on exercise, the key R package use is\n[**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R.\nBeside **tmap** package, four other R packages will be used. They are:\n\n-   [**readr**](https://readr.tidyverse.org/) for importing delimited\n    text file,\n\n-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n\n-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n\n-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for\n    handling geospatial data.\n\nAmong the four packages, **readr**, **tidyr** and **dplyr** are part of\n**tidyverse** package.\n\nThe code chunk below will be used to install and load these packages in\nRStudio.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse)\n```\n:::\n\n\nNotice that, we only need to install **tidyverse** instead of **readr**,\n**tidyr** and **dplyr** individually.\n\n## **2.3 Importing Data into R**\n\n### **2.3.1 The Data**\n\nTwo data set will be used to create the choropleth map. They are:\n\n-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`)\n    in ESRI shapefile format. It can be downloaded at\n    [data.gov.sg](https://data.gov.sg/) This is a geospatial data. It\n    consists of the geographical boundary of Singapore at the planning\n    subzone level. The data is based on URA Master Plan 2014.\n\n-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and\n    Type of Dwelling, June 2011-2020 in csv format\n    (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data\n    fie. It can be downloaded at [Department of Statistics,\n    Singapore](https://www.singstat.gov.sg/) Although it does not\n    contain any coordinates values, but it’s PA and SZ fields can be\n    used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL`\n    shapefile.\n\n### **2.3.2 Importing Geospatial Data into R**\n\nThe code chunk below uses the *st_read()* function of **sf** package to\nimport `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data\nframe called `mpsz`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"C:/Users/thevi/OneDrive/Desktop/IS415/IS415/Hands-On/data/data_2/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\thevi\\OneDrive\\Desktop\\IS415\\IS415\\Hands-On\\data\\data_2\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\nYou can examine the content of `mpsz` by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n\n\n:::\n:::\n\n\nNotice that only the first ten records will be displayed. Do you know\nwhy?\n\n### **2.3.3 Importing Attribute Data into R**\n\nNext, we will import *respopagsex2011to2020.csv* file into RStudio and\nsave the file into an R dataframe called *popdata*.\n\nThe task will be performed by using *read_csv()* function of **readr**\npackage as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"C:/Users/thevi/OneDrive/Desktop/IS415/IS415/Hands-On/data/data_2/respopagesexfa2011to2020.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 738492 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n### **2.3.4 Data Preparation**\n\nBefore a thematic map can be prepared, you are required to prepare a\ndata table with year 2020 values. The data table should include the\nvariables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\n-   YOUNG: age group 0 to 4 until age groyup 20 to 24,\n\n-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,\n\n-   AGED: age group 65 and above,\n\n-   TOTAL: all age group, and\n\n-   DEPENDENCY: the ratio between young and aged against economy active\n    group\n\n#### 2.3.4.1 Data wrangling\n\nThe following data wrangling and transformation functions will be used:\n\n-   *pivot_wider()* of **tidyr** package, and\n\n-   *mutate()*, *filter()*, *group_by()* and *select()* of **dplyr**\n    package\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\n#### 2.3.4.2 Joining the attribute data and geospatial data\n\nBefore we can perform the georelational join, one extra step is required\nto convert the values in PA and SZ fields to uppercase. This is because\nthe values of PA and SZ fields are made up of upper- and lowercase. On\nthe other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\nNext, *left_join()* of **dplyr** is used to join the geographical data\nand attribute table using planning subzone name e.g. *SUBZONE_N* and\n*SZ* as the common identifier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\nThing to learn from the code chunk above:\n\n-   *left_join()* of **dplyr** package is used with `mpsz` simple\n    feature data frame as the left data table is to ensure that the\n    output will be a simple features data frame.\n\n## **2.4 Choropleth Mapping Geospatial Data Using *tmap***\n\nChoropleth mapping involves the symbolisation of enumeration units, such\nas countries, provinces, states, counties or census units, using area\npatterns or graduated colors. For example, a social scientist may need\nto use a choropleth map to portray the spatial distribution of aged\npopulation of Singapore by Master Plan 2014 Subzone Boundary.\n\nTwo approaches can be used to prepare thematic map using *tmap*, they\nare:\n\n-   Plotting a thematic map quickly by using *qtm()*.\n\n-   Plotting highly customisable thematic map by using tmap elements.\n\n### **2.4.1 Plotting a choropleth map quickly by using *qtm()***\n\nThe easiest and quickest to draw a choropleth map using **tmap** is\nusing *qtm()*. It is concise and provides a good default visualisation\nin many cases.\n\nThe code chunk below will draw a cartographic standard choropleth map as\nshown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThings to learn from the code chunk above:\n\n-   *tmap_mode()* with “plot” option is used to produce a static map.\n    For interactive mode, “view” option should be used.\n\n-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)\n\n### **2.4.2 Creating a choropleth map by using *tmap*’s elements**\n\nDespite its usefulness of drawing a choropleth map quickly and easily,\nthe disadvantge of *qtm()* is that it makes aesthetics of individual\nlayers harder to control. To draw a high quality cartographic choropleth\nmap as shown in the figure below, **tmap**’s drawing elements should be\nused.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nIn the following sub-section, we will share with you tmap functions that\nused to plot these elements.\n\n#### 2.4.2.1 Drawing a base map\n\nThe basic building block of **tmap** is *tm_shape()* followed by one or\nmore layer elemments such as *tm_fill()* and *tm_polygons()*.\n\nIn the code chunk below, *tm_shape()* is used to define the input data\n(i.e *mpsz_pop2020*) and *tm_polygons()* is used to draw the planning\nsubzone polygons\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n#### 2.4.2.2 Drawing a choropleth map using *tm_polygons()*\n\nTo draw a choropleth map showing the geographical distribution of a\nselected variable by planning subzone, we just need to assign the target\nvariable such as *Dependency* to *tm_polygons()*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nThings to learn from *tm_polygons()*:\n\n-   The default interval binning used to draw the choropleth map is\n    called “pretty”. A detailed discussion of the data classification\n    methods supported by **tmap** will be provided in sub-section 4.3.\n\n-   The default colour scheme used is `YlOrRd` of ColorBrewer. You will\n    learn more about the color scheme in sub-section 4.4.\n\n-   By default, Missing value will be shaded in grey.\n\n#### 2.4.2.3 Drawing a choropleth map using *tm_fill()* and \\*tm_border()\\*\\*\n\nActually, *tm_polygons()* is a wraper of *tm_fill()* and *tm_border()*.\n*tm_fill()* shades the polygons by using the default colour scheme and\n*tm_borders()* adds the borders of the shapefile onto the choropleth\nmap.\n\nThe code chunk below draws a choropleth map by using *tm_fill()* alone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nNotice that the planning subzones are shared according to the respective\ndependecy values\n\nTo add the boundary of the planning subzones, tm_borders will be used as\nshown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n```\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nNotice that light-gray border lines have been added on the choropleth\nmap.\n\nThe *alpha* argument is used to define transparency number between 0\n(totally transparent) and 1 (not transparent). By default, the alpha\nvalue of the col is used (normally 1).\n\nBeside *alpha* argument, there are three other arguments for\n*tm_borders()*, they are:\n\n-   *col* = border colour,\n\n-   *lwd* = border line width. The default is 1, and\n\n-   *lty* = border line type. The default is “solid”.\n\n### **2.4.3 Data classification methods of tmap**\n\nMost choropleth maps employ some methods of data classification. The\npoint of classification is to take a large number of observations and\ngroup them into data ranges or classes.\n\n**tmap** provides a total ten data classification methods, namely:\n*fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*,\n*hclust*, *bclust*, *fisher*, and *jenks*.\n\nTo define a data classification method, the *style* argument of\n*tm_fill()* or *tm_polygons()* will be used.\n\n#### 2.4.3.1 Plotting choropleth maps with built-in classification methods\n\nThe code chunk below shows a quantile data classification that used 5\nclasses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nIn the code chunk below, *equal* data classification method is used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nNotice that the distribution of quantile data classification method are\nmore evenly distributed then equal data classification method.\n\n> **Warning: Maps Lie!**\n\n> DIY: Using what you had learned, prepare choropleth maps by using\n> different classification methods supported by tmap and compare their\n> differences.\n\n> DIY: Preparing choropleth maps by using similar classification method\n> but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the\n> output maps, what observation can you draw?\n\n#### 2.4.3.2 Plotting choropleth map with custome break\n\nFor all the built-in styles, the category breaks are computed\ninternally. In order to override these defaults, the breakpoints can be\nset explicitly by means of the *breaks* argument to the *tm_fill()*. It\nis important to note that, in **tmap** the breaks include a minimum and\nmaximum. As a result, in order to end up with n categories, n+1 elements\nmust be specified in the *breaks* option (the values must be in\nincreasing order).\n\nBefore we get started, it is always a good practice to get some\ndescriptive statistics on the variable before setting the break points.\nCode chunk below will be used to compute and display the descriptive\nstatistics of **DEPENDENCY** field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.7113  0.7926  0.8561  0.8786 19.0000      92 \n```\n\n\n:::\n:::\n\n\nWith reference to the results above, we set break point at 0.60, 0.70,\n0.80, and 0.90. In addition, we also need to include a minimum and\nmaximum, which we set at 0 and 100. Our *breaks* vector is thus c(0,\n0.60, 0.70, 0.80, 0.90, 1.00)\n\nNow, we will plot the choropleth map by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Values have found that are higher than the highest break\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n### **2.4.4 Colour Scheme**\n\n**tmap** supports colour ramps either defined by the user or a set of\npredefined colour ramps from the **RColorBrewer** package.\n\n#### 2.4.4.1 Using ColourBrewer palette\n\nTo change the colour, we assign the preferred colour to *palette*\nargument of *tm_fill()* as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nNotice that the choropleth map is shaded in green.\n\nTo reverse the colour shading, add a “-” prefix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nNotice that the colour scheme has been reversed.\n\n### **2.4.5 Map Layouts**\n\nMap layout refers to the combination of all map elements into a\ncohensive map. Map elements include among others the objects to be\nmapped, the title, the scale bar, the compass, margins and aspects\nratios. Colour settings and data classification methods covered in the\nprevious section relate to the palette and break-points are used to\naffect how the map looks.\n\n#### 2.4.5.1 Map Legend\n\nIn **tmap**, several *legend* options are provided to change the\nplacement, format and appearance of the legend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n#### 2.4.5.2 Map style\n\n**tmap** allows a wide variety of layout settings to be changed. They\ncan be called by using *tmap_style()*.\n\nThe code chunk below shows the *classic* style is used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"classic\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n#### 2.4.5.3 Cartographic Furniture\n\nBeside map style, **tmap** also also provides arguments to draw other\nmap furniture such as compass, scale bar and grid lines.\n\nIn the code chunk below, *tm_compass()*, *tm_scale_bar()* and\n*tm_grid()* are used to add compass, scale bar and grid lines onto the\nchoropleth map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nTo reset the default style, refer to the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_style(\"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"white\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n\n\n:::\n:::\n\n\n### **2.4.6 Drawing Small Multiple Choropleth Maps**\n\n**Small multiple maps**, also referred to as **facet maps**, are\ncomposed of many maps arrange side-by-side, and sometimes stacked\nvertically. Small multiple maps enable the visualisation of how spatial\nrelationships change with respect to another variable, such as time.\n\nIn **tmap**, small multiple maps can be plotted in three ways:\n\n-   by assigning multiple values to at least one of the asthetic\n    arguments,\n\n-   by defining a group-by variable in *tm_facets()*, and\n\n-   by creating multiple stand-alone maps with *tmap_arrange()*.\n\n#### 2.4.6.1 By assigning multiple values to at least one of the aesthetic arguments\n\nIn this example, small multiple choropleth maps are created by defining\n***ncols*** in **tm_fill()**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"white\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nIn this example, small multiple choropleth maps are created by assigning\nmultiple values to at least one of the aesthetic arguments\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n#### 2.4.6.2 By defining a group-by variable in *tm_facets()*\n\nIn this example, multiple small choropleth maps are created by using\n**tm_facets()**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n#### 2.4.6.3 By creating multiple stand-alone maps with *tmap_arrange()*\n\nIn this example, multiple small choropleth maps are created by creating\nmultiple stand-alone maps with **tmap_arrange()**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n### **2.4.7 Mappping Spatial Object Meeting a Selection Criterion**\n\nInstead of creating small multiple choropleth map, you can also use\nselection funtion to map spatial objects meeting the selection\ncriterion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n## **2.5 Reference**\n\n### **2.5.1 All about tmap package**\n\n-   [tmap: Thematic Maps in\n    R](https://www.jstatsoft.org/article/view/v084i06)\n\n-   [tmap](https://cran.r-project.org/web/packages/tmap/index.html)\n\n-   [tmap: get\n    started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)\n\n-   [tmap: changes in version\n    2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)\n\n-   [tmap: creating thematic maps in a flexible way\n    (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)\n\n-   [Exploring and presenting maps with tmap\n    (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)\n\n### **2.5.2 Geospatial data wrangling**\n\n-   [sf: Simple Features for\n    R](https://cran.r-project.org/web/packages/sf/index.html)\n\n-   [Simple Features for R: StandardizedSupport for Spatial Vector\n    Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)\n\n-   [Reading, Writing and Converting Simple\n    Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)\n\n### **2.5.3 Data wrangling**\n\n-   [dplyr](https://dplyr.tidyverse.org/)\n\n-   [Tidy\n    data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)\n\n-   [tidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’\n    Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)\n",
    "supporting": [
      "2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}